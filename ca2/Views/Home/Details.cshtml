@model ca2.Models.Movie

<<<<<<< HEAD
<div class="container">
    <h2>@ViewBag.PageTitle</h2>
    <div class="row">
        <div class="col-xs-2">
            <h4><span class="label label-info">@Html.DisplayNameFor(model => model.Director)&nbsp;</span>&nbsp;@Model.Director.Name</h4>
        </div>
        <div class="col-xs-3">
            <h4><span class="label label-info">Male/Female:&nbsp;</span>&nbsp;&nbsp;<span class="pie">@ViewBag.SexStatsMale,@ViewBag.SexStatsFemale</span></h4>
        </div>
        <div class="col-xs-4">
            <h4><span class="label label-info">Releases:&nbsp;</span>&nbsp;<span id="releases">@Model.ReleaseDate.ToShortDateString()</span></h4>
        </div>
        <div class="col-xs-3">
            <h4 class="text-center"><span class="label label-primary text-center">Male/Female Split&nbsp;&nbsp;</span></h4>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-9">
            @Html.Partial("_ActorsInMovie", Model.Actors)
            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary", @style = "margin-top:10px" })
        </div>
        <div class="col-xs-3">
            <canvas id="maleFemaleChart"></canvas>
        </div>
    </div>
</div>
@section scripts
{
    <script>
        $(function () {      // ready event
            $(".pie").peity("pie");
            $("#releases").html("...".concat(moment($("#releases").text(), "DD/MM/YYYY").fromNow()));
            $('[data-toggle="tooltip"]').tooltip({ container: 'body' }); 
            $('.peity').tooltip({ title: '@ViewBag.SexStatsMale Male / @ViewBag.SexStatsFemale Female', placement: 'bottom' });
            var ctx = $("#maleFemaleChart").get(0).getContext("2d");
                var data = [
                    {
                        value: @ViewBag.SexStatsMale,
                        color: "#F7464A",
                        highlight: "#FF5A5E",
                        label: "Male"
                    },
                {
                    value: @(ViewBag.SexStatsFemale),
                    color: "#46BFBD",
                    highlight: "#5AD3D1",
                    label: "Female"
                }
                ];
                Chart.defaults.global = {
                    // Boolean - Whether to animate the chart
                    animation: true,

                    // Number - Number of animation steps
                    animationSteps: 60,

                    // String - Animation easing effect
                    animationEasing: "easeOutQuart",

                    // Boolean - If we should show the scale at all
                    showScale: true,

                    // Boolean - If we want to override with a hard coded scale
                    scaleOverride: false,

                    // ** Required if scaleOverride is true **
                    // Number - The number of steps in a hard coded scale
                    scaleSteps: null,
                    // Number - The value jump in the hard coded scale
                    scaleStepWidth: null,
                    // Number - The scale starting value
                    scaleStartValue: null,

                    // String - Colour of the scale line
                    scaleLineColor: "rgba(0,0,0,.1)",

                    // Number - Pixel width of the scale line
                    scaleLineWidth: 1,

                    // Boolean - Whether to show labels on the scale
                    scaleShowLabels: true,

                    // Interpolated JS string - can access value
                    scaleLabel: "<%=value%>",

                    // Boolean - Whether the scale should stick to integers, not floats even if drawing space is there
                    scaleIntegersOnly: true,

                    // Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                    scaleBeginAtZero: false,

                    // String - Scale label font declaration for the scale label
                    scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

                    // Number - Scale label font size in pixels
                    scaleFontSize: 12,

                    // String - Scale label font weight style
                    scaleFontStyle: "normal",

                    // String - Scale label font colour
                    scaleFontColor: "#666",

                    // Boolean - whether or not the chart should be responsive and resize when the browser does.
                    responsive: false,

                    // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                    maintainAspectRatio: true,

                    // Boolean - Determines whether to draw tooltips on the canvas or not
                    showTooltips: true,

                    // Array - Array of string names to attach tooltip events
                    tooltipEvents: ["mousemove", "touchstart", "touchmove"],

                    // String - Tooltip background colour
                    tooltipFillColor: "rgba(0,0,0,0.8)",

                    // String - Tooltip label font declaration for the scale label
                    tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

                    // Number - Tooltip label font size in pixels
                    tooltipFontSize: 14,

                    // String - Tooltip font weight style
                    tooltipFontStyle: "normal",

                    // String - Tooltip label font colour
                    tooltipFontColor: "#fff",

                    // String - Tooltip title font declaration for the scale label
                    tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

                    // Number - Tooltip title font size in pixels
                    tooltipTitleFontSize: 14,

                    // String - Tooltip title font weight style
                    tooltipTitleFontStyle: "bold",

                    // String - Tooltip title font colour
                    tooltipTitleFontColor: "#fff",

                    // Number - pixel width of padding around tooltip text
                    tooltipYPadding: 6,

                    // Number - pixel width of padding around tooltip text
                    tooltipXPadding: 6,

                    // Number - Size of the caret on the tooltip
                    tooltipCaretSize: 8,

                    // Number - Pixel radius of the tooltip border
                    tooltipCornerRadius: 6,

                    // Number - Pixel offset from point x to tooltip edge
                    tooltipXOffset: 10,

                    // String - Template string for single tooltips
                    tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>",

                    // String - Template string for single tooltips
                    multiTooltipTemplate: "<%= value %>",

                    // Function - Will fire on animation progression.
                    onAnimationProgress: function () { },

                    // Function - Will fire on animation completion.
                    onAnimationComplete: function () { }
                };
                var options = {
                    //Boolean - Whether we should show a stroke on each segment
                    segmentShowStroke: true,

                    //String - The colour of each segment stroke
                    segmentStrokeColor: "#fff",

                    //Number - The width of each segment stroke
                    segmentStrokeWidth: 2,

                    //Number - The percentage of the chart that we cut out of the middle
                    percentageInnerCutout: 20, // This is 0 for Pie charts

                    //Number - Amount of animation steps
                    animationSteps: 100,

                    //String - Animation easing effect
                    animationEasing: "easeOutBounce",

                    //Boolean - Whether we animate the rotation of the Doughnut
                    animateRotate: true,

                    //Boolean - Whether we animate scaling the Doughnut from the centre
                    animateScale: false,

                    //String - A legend template
                    legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"

                };
                var chrt = new Chart(ctx[1]).Doughnut(data, options);
            });
    </script>
}
=======
@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<fieldset>
    <legend>Movie</legend>

    <div class="display-label">
         @Html.DisplayNameFor(model => model.Title)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.Title)
    </div>

    <div class="display-label">
         @Html.DisplayNameFor(model => model.ReleaseDate)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.ReleaseDate)
    </div>

    <div class="display-label">
         @Html.DisplayNameFor(model => model.DirectorId)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.DirectorId)
    </div>
</fieldset>
<p>
    @Html.ActionLink("Edit", "Edit", new { id=Model.MovieId }) |
    @Html.ActionLink("Back to List", "Index")
</p>
>>>>>>> 30c066fafa3b636dade4ba731a5ee39abf35641d
